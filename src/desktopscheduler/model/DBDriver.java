/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desktopscheduler.model;
import java.sql.*;
import java.util.ArrayList;
/**
 *
 * @author Dylan
 */
public class DBDriver {
    private static final String URL = "jdbc:mysql://52.206.157.109/U05AXu";
    private static final String USER = "U05AXu";
    private static final String PASS = "53688446515";
    
    public static boolean authenticate(String userName, String password){
        try(Connection conn = DriverManager.getConnection(URL, USER, PASS)){
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT password FROM user WHERE userName = '" +userName+ "'");
            rs.first();
            if(rs.getString(1).equals(password)){
                return true;
            }
        }
        catch(SQLException e){
            System.out.println(e);
        }
        return false;
    }
    
    //Returns the addressId that is generated by the database
    public static int insertAddress(String address, String address2, int cityId, String postal, String phone){
        try(Connection conn = DriverManager.getConnection(URL, USER, PASS)){
            Statement stmt = conn.createStatement();
            String query = String.format("INSERT IGNORE INTO address(address, address2, cityId, postalCode, phone) "
                    + "VALUES("
                    + "'%s', '%s', '%x', '%s', '%s')", address, address2, cityId, postal, phone);
            stmt.executeUpdate(query, Statement.RETURN_GENERATED_KEYS);
            ResultSet rs = stmt.getGeneratedKeys();
            rs.next();
            int newId = rs.getInt(1);
            return newId;
        }
        catch(SQLException e){
            System.out.println(e);
        }
        return -1;
    }
    
    public static boolean insertCustomer(String name, int addressId){
        try(Connection conn = DriverManager.getConnection(URL, USER, PASS)){
            Statement stmt = conn.createStatement();
            String query = "INSERT IGNORE INTO customer(customerName, addressId) VALUES('"+name+"', " +"'"+Integer.toString(addressId)+"'"+")";
            System.out.println(query);
            stmt.executeUpdate(query);
            return true;
        }
        catch(SQLException e){
            System.out.println(e);
        }
        return false;
    }
    
    public static boolean insertAppointment(){
        try(Connection conn = DriverManager.getConnection(URL, USER, PASS)){
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("");
        }
        catch(SQLException e){
            System.out.println(e);
        }
        return false;
    }
    
    public static boolean updateAddress(int addressId, String address, String address2, int cityId, String postal, String phone){
        try(Connection conn = DriverManager.getConnection(URL, USER, PASS)){
            Statement stmt = conn.createStatement();
            stmt.executeUpdate("UPDATE address SET address='" +address+ "', "
                    + "address2='" +address2+ "', "+ "cityId=" +Integer.toString(cityId)+ ", "
                    + "postalCode='" +postal+ "', "+ "phone='" +phone+ "'"
                    + "WHERE addressId=" +Integer.toString(addressId));
            return true;
        }
        catch(SQLException e){
            System.out.println(e);
        }
        return false;
    }
    
    public static boolean updateCustomer(int customerId, String name, int addressId){
        try(Connection conn = DriverManager.getConnection(URL, USER, PASS)){
            Statement stmt = conn.createStatement();
            stmt.executeUpdate("UPDATE customer SET customerName='" +name+ "' WHERE customerId='" +customerId+ "'");
            return true;
        }
        catch(SQLException e){
            System.out.println(e);
        }
        return false;
    }
    
    public static boolean updateAppointment(){
        return false;
    }
    
    public static boolean removeCustomer(int customerId){
        try(Connection conn = DriverManager.getConnection(URL, USER, PASS)){
            Statement stmt = conn.createStatement();
            stmt.executeUpdate("DELETE FROM customer WHERE customerId='" +customerId+ "'");
            return true;
        }
        catch(SQLException e){
            System.out.println(e);
        }
        return false;
    }
    
    public static ArrayList<Customer> getCustomerList(){
        ArrayList<Customer> customers = new ArrayList();
        try(Connection conn = DriverManager.getConnection(URL, USER, PASS)){
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM customer");
            
            while(rs.next()){
                int customerId = Integer.parseInt(rs.getString("customerId"));
                String customerName = rs.getString("customerName");
                int addressId = Integer.parseInt(rs.getString("addressId"));
                Customer c = new Customer(customerId, customerName, addressId);
                customers.add(c);
            }
        }
        catch(SQLException e){
            System.out.println(e);
        }
        return customers;
    }
    
    public static Address getAddress(int addressId){
        Address toReturn = new Address();
        try(Connection conn = DriverManager.getConnection(URL, USER, PASS)){
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT addressId, address, address2, cityId,"
                    + "postalCode, phone "
                    + "FROM address "
                    + "WHERE addressId='" +addressId+ "'");
            while(rs.next()){
                int addId = Integer.parseInt(rs.getString("addressId"));
                String address = rs.getString("address");
                String address2 = rs.getString("address2");
                int cityId = Integer.parseInt(rs.getString("cityId"));
                String postal = rs.getString("postalCode");
                String phone = rs.getString("phone");
                toReturn = new Address(addId, address, address2, cityId, postal, phone);
            }
            
        }
        catch(SQLException e){
            System.out.println(e);
        }
        return toReturn;
    }
    
}
